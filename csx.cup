/***
 *
 * This Is A Java CUP Specification For CSX-lite, a Small Subset
 * of The CSX Language, used In CS536
 * Extend this specification to handle all of CSX.
 *
 ***/

/* Preliminaries to set up and use the scanner.  */

/* Preliminaries to set up and use the scanner.  */

import java_cup.runtime.*;

parser code {:
 public void syntax_error(Symbol cur_token)
     {
 	  report_error("CSX syntax error at line "+
			String.valueOf(((CSXToken)cur_token.value).linenum),  
			null);
     }
:};
init with {:              :};
scan with {: return Scanner.next_token(); :};

/* Terminals (tokens returned by the scanner). */
terminal CSXIdentifierToken     IDENTIFIER; 
terminal CSXIntLitToken			INTLIT;
terminal CSXCharLitToken		CHARLIT;
terminal CSXStringLitToken		STRLIT;
terminal CSXBitStringToken		INT_BITSTR;
terminal CSXToken     			SEMI, LPAREN, RPAREN, ASG, LBRACE, RBRACE;
terminal CSXToken     			PLUS, MINUS, EQ, NOTEQ, rw_IF, COR, CAND, AND, OR;
terminal CSXToken     			rw_INT, rw_BOOL, rw_WHILE, COLON, rw_PRINT, rw_READ;
terminal CSXToken				rw_CLASS, GT, RBRACKET, LBRACKET, rw_CONST;
terminal CSXToken				LT, rw_CHAR, rw_RETURN, rw_VOID, TIMES, COMMA;
terminal CSXToken  				GEQ, LEQ, rw_FALSE, SLASH, rw_ELSE;
terminal CSXToken				rw_TRUE, rw_BREAK, rw_CONTINUE, NOT;
terminal CSXToken				INCREMENT, DECREMENT;

/* Non terminals */
non terminal classNode      	prog; 
non terminal memberDeclsNode 	memberdecls; 
non terminal methodDeclsOption	methoddecls;
non terminal methodDeclNode		methoddecl;
non terminal stmtsOption     	stmts;  
non terminal stmtNode	     	stmt;
non terminal typeNode			type;
non terminal exprNode			exp;
non terminal argsNode			args;
non terminal exprNode			term;
non terminal exprNode 			factor;
non terminal exprNode			pri;
non terminal exprNode			unary;
non terminal exprNode			unit; 
non terminal identNode	     	ident;
non terminal argDeclsOption		argdecls;
non terminal argDeclNode		argdecl;
non terminal fieldDeclsOption	fielddecls; 
non terminal declNode			fielddecl;
non terminal Symbol		     	optionalSemi;
non terminal intLitNode		    intliteral;
non terminal charLitNode		charliteral;
non terminal strLitNode			stringliteral;
non terminal bitStringNode		bitstring;
non terminal trueNode			true;
non terminal falseNode 			false;
non terminal nameNode			name;
non terminal readNode			read;
non terminal printNode			print;




start with prog;

prog		::=    rw_CLASS:c ident:i LBRACE memberdecls:m RBRACE optionalSemi
			 {: 
			 RESULT=new classNode(i, m, c.linenum, c.colnum); :}	
		;
		
memberdecls  ::=  fielddecl:f memberdecls:m
				{: RESULT=new memberDeclsNode(new fieldDeclsNode(f,m.fields,f.linenum,f.colnum),
					m.methods,f.linenum,f.colnum); :}
			 | 	  methoddecls:m
			 	{: RESULT=new memberDeclsNode(fieldDeclsNode.NULL,m,m.linenum,m.colnum); :}
		;

		
fielddecls
   			 ::=   fielddecl:f1 fielddecls:f2 
				 {: RESULT=
					new fieldDeclsNode(f1,f2, f1.linenum,f1.colnum); :}	
   			 |
				 {: RESULT=
					fieldDeclsNode.NULL; :}	
    		;
    		
methoddecls  ::= methoddecl:md methoddecls:mds
				 {: RESULT=new methodDeclsNode(md,mds,md.linenum,md.colnum); :}
			|
				{: RESULT= methodDeclsNode.NULL; :}
			;

methoddecl   ::= type:t ident:i LPAREN RPAREN LBRACE fielddecls:f stmts:s RBRACE optionalSemi
				 {:
				 RESULT=new methodDeclNode(i,argDeclsNode.NULL,t,f,s,t.linenum,t.colnum);
				 :}
			|	 type:t ident:i LPAREN argdecls:a RPAREN LBRACE fielddecls:f stmts:s RBRACE optionalSemi
				 {:
				 RESULT=new methodDeclNode(i,a,t,f,s,t.linenum,t.colnum);
				 :}
			|	 rw_VOID:v ident:i LPAREN RPAREN LBRACE fielddecls:f stmts:s RBRACE optionalSemi
				 {:
				 RESULT=new methodDeclNode(i,argDeclsNode.NULL,new voidTypeNode(v.linenum,v.colnum),
				 f,s,v.linenum,v.colnum);
				 :}
			|	 rw_VOID:v ident:i LPAREN argdecls:a RPAREN LBRACE fielddecls:f stmts:s RBRACE optionalSemi
				 {:
				 RESULT=new methodDeclNode(i,a,new voidTypeNode(v.linenum,v.colnum),
				 f,s,v.linenum,v.colnum);
				 :}
			;
    		
argdecls	 ::= argdecl:a COMMA argdecls:as
				 {:
				 	RESULT=new argDeclsNode(a,as,a.linenum,a.colnum);
    			 :}
    		|	argdecl:a
    			 {:
    			 	RESULT=new argDeclsNode(a,argDeclsNode.NULL,a.linenum,a.colnum);
    			 :}
    		;
    		
argdecl
			 ::= type:t     ident:i
			 	 {: 
			 	 	RESULT=new valArgDeclNode(i,t,t.linenum,t.colnum);
			 	 :}
		|	type:t ident:i LBRACKET RBRACKET
			{:
			 RESULT=new arrayArgDeclNode(i,t,t.linenum,t.colnum); 
			:}
			;
			
fielddecl
   			 ::= type:t     ident:i      SEMI 
				 {: RESULT=
					new varDeclNode(i,t,exprNode.NULL, t.linenum,t.colnum); :}
		|	type:t ident:i ASG exp:e SEMI
			{:RESULT= new varDeclNode(i,t,e,t.linenum,t.colnum); :}
		|	type:t ident:id LBRACKET intliteral:i RBRACKET SEMI
			{: RESULT= new arrayDeclNode(id,t,i,t.linenum,t.colnum); :}
		|	rw_CONST:c ident:i ASG exp:e SEMI
			{: RESULT=new constDeclNode(i,e,c.linenum,c.colnum); :}				
    		;
    		
stmts		::= stmt:s1  stmts:s2
			 {: RESULT=
			new stmtsNode(s1,s2,s1.linenum,s1.colnum);
			 :}	
		| 
			 {: RESULT= stmtsNode.NULL; :} 
		;
stmt		::= rw_IF:i LPAREN exp:e RPAREN  stmt:s
			 {:
			 RESULT=new ifThenNode(e,s, i.linenum,i.colnum); 
			 :}	
		| rw_IF:i LPAREN exp:e RPAREN  stmt:s1 rw_ELSE stmt:s2
			 {:
			 RESULT=new ifThenNode(e,s1,s2, i.linenum,i.colnum); 
			 :}
		| rw_WHILE:w LPAREN exp:e RPAREN stmt:s
        	{: 
        		RESULT=new whileNode(exprNode.NULL, e, s, w.linenum, w.colnum);   
        	:}
        | ident:i COLON rw_WHILE LPAREN exp:e RPAREN stmt:s
        	{:
        		RESULT=new whileNode(i, e, s, i.linenum, i.colnum);
        	:}
		| name:n ASG exp:e SEMI
			 {: RESULT=
			new asgNode(n,e,n.linenum,n.colnum);
			 :}		  
		| name:n INCREMENT SEMI
			 {:
			 RESULT=new incrementNode(n,n.linenum,n.colnum);
			 :}
		| name:n DECREMENT SEMI
			 {:
			 RESULT=new decrementNode(n,n.linenum,n.colnum);
			 :}
		| rw_READ:r LPAREN read:rd RPAREN SEMI
			{: 
			 RESULT=new readNode(rd.targetVar, rd.moreReads, r.linenum, r.colnum); 
			:}
		| rw_PRINT:p LPAREN print:pr RPAREN SEMI
			{: 
			 RESULT=new printNode(pr.outputValue, pr.morePrints, p.linenum, p.colnum); 
			:}
		| ident:i LPAREN RPAREN SEMI
			{: 
			 RESULT=new callNode(i,argsNode.NULL,i.linenum,i.colnum); 
			:} 
		| ident:i LPAREN args:a RPAREN SEMI
			{: 
			 RESULT=new callNode(i,a,i.linenum,i.colnum); 
			:}
		| rw_RETURN:r SEMI
			{: 
			 RESULT=new returnNode(exprNode.NULL,r.linenum,r.colnum); 
			:} 
		| rw_RETURN:r  exp: e SEMI
			{: 
			 RESULT=new returnNode(e,r.linenum,r.colnum); 
			:} 
		| rw_BREAK:b ident:i SEMI
			{: 
			 RESULT=new breakNode(i,b.linenum,b.colnum); 
			:} 
		| rw_CONTINUE:c ident:i SEMI
			{: 
			 RESULT=new continueNode(i,c.linenum,c.colnum); 
			:}				
		|   LBRACE:l fielddecls:f stmts:s RBRACE optionalSemi
	 		{:
	  			 RESULT=new blockNode(f,s, l.linenum, l.colnum);
        	 :}	
        ;
        
type	::= rw_INT:i
			 {: RESULT = new intTypeNode(i.linenum,i.colnum); :}
		|	rw_CHAR:c
			 {: RESULT = new charTypeNode(c.linenum,c.colnum); :}
		|	rw_BOOL:b
			 {: RESULT = new boolTypeNode(b.linenum,b.colnum); :}
		;
		
args 	::= exp:e COMMA args:a
			 {: RESULT=new argsNode(e,a,e.linenum,e.colnum); :}
		|	exp:e
			 {: RESULT=new argsNode(e,argsNode.NULL,e.linenum,e.colnum); :}
		;

read    ::= name:n COMMA read:r
			{: RESULT=new readNode(n,r,n.linenum,n.colnum); :}
		| 	name:n
			{: RESULT=new readNode(n,readNode.NULL,n.linenum,n.colnum); :}
		;

print	::= exp:e COMMA print:p
			{: RESULT=new printNode(e,p,e.linenum,e.colnum); :}
		|	exp:e
			{: RESULT=new printNode(e,printNode.NULL,e.linenum,e.colnum); :}
		;
         
exp		::= exp:leftval COR:op term:rightval
			 {: RESULT=new binaryOpNode(leftval,sym.COR,rightval,op.linenum,op.colnum,ASTNode.Types.Boolean); :}	
		| exp:leftval CAND:op term:rightval
			 {: RESULT=new binaryOpNode(leftval,sym.CAND,rightval,op.linenum,op.colnum,ASTNode.Types.Boolean); :}
		| exp:leftval OR:op term:rightval
			 {: RESULT=new binaryOpNode(leftval,sym.OR,rightval,op.linenum,op.colnum,ASTNode.Types.Boolean); :}	
		| exp:leftval AND:op term:rightval
			 {: RESULT=new binaryOpNode(leftval,sym.AND,rightval,op.linenum,op.colnum,ASTNode.Types.Boolean); :}
	    
		|   term:t
			{: RESULT = t; :}
		;

pri		::= pri:leftval TIMES:op unary:rightval
			{: RESULT= new binaryOpNode(leftval,sym.TIMES,rightval,op.linenum,op.colnum,ASTNode.Types.Integer); :}
		|	pri:leftval SLASH:op unary:rightval
			{: RESULT= new binaryOpNode(leftval,sym.SLASH,rightval,op.linenum,op.colnum,ASTNode.Types.Integer); :}
		|	unary:u
				{: RESULT= u; :}
		;
term	::=	factor:leftval LT:op factor:rightval
			{: RESULT = new binaryOpNode(leftval,sym.LT,rightval,op.linenum,op.colnum,ASTNode.Types.Boolean); :}
		|	factor:leftval GT:op factor:rightval
			{: RESULT = new binaryOpNode(leftval,sym.GT,rightval,op.linenum,op.colnum,ASTNode.Types.Boolean); :}
		|	factor:leftval LEQ:op factor:rightval
			{: RESULT = new binaryOpNode(leftval,sym.LEQ,rightval,op.linenum,op.colnum,ASTNode.Types.Boolean); :}
		|	factor:leftval GEQ:op factor:rightval
			{: RESULT = new binaryOpNode(leftval,sym.GEQ,rightval,op.linenum,op.colnum,ASTNode.Types.Boolean); :}
		|	factor:leftval EQ:op factor:rightval
			{: RESULT = new binaryOpNode(leftval,sym.EQ,rightval,op.linenum,op.colnum,ASTNode.Types.Boolean); :}
		|	factor:leftval NOTEQ:op factor:rightval
			{: RESULT = new binaryOpNode(leftval,sym.NOTEQ,rightval,op.linenum,op.colnum,ASTNode.Types.Boolean); :}
		| 	factor:f
			{: RESULT = f; :}
		;
factor 	::= factor:leftval PLUS:op pri:rightval
			{: RESULT = new binaryOpNode(leftval,sym.PLUS,rightval,op.linenum,op.colnum,ASTNode.Types.Integer); :}
		|	factor:leftval MINUS:op pri:rightval
			{: RESULT = new binaryOpNode(leftval,sym.MINUS,rightval,op.linenum,op.colnum,ASTNode.Types.Integer); :}
		|	pri:p
			{: RESULT = p; :}
		;
unary 	::= NOT:n unary:u
			{: RESULT = new unaryOpNode(sym.NOT,u,n.linenum,n.colnum); :}
		|	LPAREN type:t RPAREN unary:u
			{: RESULT = new castNode(t, u, t.linenum, t.colnum); :} 
		| 	unit:u
			{: RESULT = u; :}
		;
unit    ::=	name:n
			 {: RESULT = n; :}
        |   ident:i LPAREN RPAREN 
	   		 {: RESULT = new fctCallNode(i,argsNode.NULL,i.linenum,i.colnum); :}
	   	| 	ident:i LPAREN args:a RPAREN
	   		 {: RESULT = new fctCallNode(i,a,i.linenum,i.colnum); :}
		|   intliteral:l
	  		 {: RESULT = l; :}
	  	| 	charliteral:c
	  		 {: RESULT = c; :}
	  	|	stringliteral:s
	  		 {: RESULT = s; :}
	  	|   bitstring:b
	  		 {: RESULT = b; :}
	  	|	true:t
	  		 {:RESULT = t; :}
	  	|	false:f
	  		 {:RESULT = f; :}
	  	|   LPAREN exp:e RPAREN
	  		 {: RESULT = e; :} 
		;
name 	::= ident:i
			{: RESULT = new nameNode(i,i.linenum, i.colnum); :}
		| 	ident:i LBRACKET exp:e RBRACKET
			{: RESULT = new nameNode(i,e,i.linenum, i.colnum); :}
		;
ident		::= IDENTIFIER:i
			 {: RESULT = new identNode(i.identifierText,
									   i.linenum,i.colnum); :}	
		;
		
intliteral
   ::= INTLIT:i
	 {: RESULT = new intLitNode(i.intValue, i.linenum,i.colnum);
         :}	
    ;
    
charliteral 
	::= CHARLIT:c
	{: RESULT =new charLitNode(c.charValue,c.linenum,c.colnum); :}
	;
stringliteral
	::= STRLIT:s 
	{: RESULT = new strLitNode(s.stringText,s.linenum,s.colnum); :}
	;
bitstring
	::= INT_BITSTR:b
	{: RESULT = new bitStringNode(b.intValue,b.bitString,b.linenum,b.colnum); :}
	;
true
	::= rw_TRUE:t
	{: RESULT = new trueNode(t.linenum,t.colnum); :}
	;
false
	::= rw_FALSE:f
	{: RESULT = new falseNode(f.linenum,f.colnum); :}
	;
			
optionalSemi
   		 ::= SEMI
   		 |
   		 ;
